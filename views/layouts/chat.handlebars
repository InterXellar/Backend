<link rel="stylesheet" href="css/main.css" />
<link rel="stylesheet" href="css/chat.css" />
<link rel="stylesheet" href="https://cdn.materialdesignicons.com/3.5.95/css/materialdesignicons.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>


<div class="header">
    
    <div class="header-information">
        Logged in as<br>
    </div>
    <div class="settings-icon">
        <span class="mdi mdi-settings"></span>
    </div>
</div>

<div class="channellist" id="channels">
    <div class="channel">#general</div>
    <div class="channel">#memes</div>
</div>

<div class="channellist hidden" id="settings">
    <div class="settings-category" onclick="settings('account')" id="settings-account">Account<span class="mdi mdi-chevron-right settings-chevron"></span></div>
    <div class="settings-category" onclick="settings('appearance')" id="settings-appearance">Appearance<span class="mdi mdi-chevron-right settings-chevron"></span></div>
    <div class="settings-category" onclick="settings('info')" id="settings-info">Info<span class="mdi mdi-chevron-right settings-chevron"></span></div>
    <a href="/logout"><div class="settings-category">Logout<span class="mdi mdi-account-arrow-right-outline settings-chevron"></span></div></a>
</div>

<!--Settings popouts-->

<div class="settings-popout" id="settings-account-popout">
    <span class="settings-headline"><span class="mdi mdi-account-outline"> </span>Account</span><br>
</div>

<div class="settings-popout" id="settings-appearance-popout">
    <span class="settings-headline"><span class="mdi mdi-palette-outline"> </span>Appearance</span><br>
    <!--Yeah, it's simple. But works. xd-->
    <button class="button" onclick="$(document.body).toggleClass('invert')">Switch Theme</button>
</div>

<div class="settings-popout" id="settings-info-popout">
    <span class="settings-headline"><span class="mdi mdi-information-outline"> </span>Info</span><br>
    Azuma is being developed by shinixsensei and RMC Productions.
    <a href="https://github.com/rmcproductions/azuma">Github</a>
</div>



<div class="chat-messages">
    <div class="scroll-container" id="scroller">
        <div class="messages-container" id="messages-container">
            <!--Messages are appended here-->
        </div>
    </div>
    <div class="input h">
        <input placeholder="Write a message..." id="message" class="input messagebox">
        <span class="mdi mdi-send send-icon" id="send"></span>
    </div>
</div>

<div id="disconnection-warning">
    You have been disconnected from the chat. Please be patient.
</div>



<script>
    var socket = io();

    let last = {
        author: '',
        id: ''
    }

    let create_message = msg => {
        // Header (Author/Time)
        let header = document.createElement('div');

        let author = document.createElement('span');
        author.classList = 'message-author';
        author.append(document.createTextNode(msg.author.name + ' '));

        let time = document.createElement('span');
        time.classList = 'message-time';
        time.innerHTML = new Date(Date(message.createdAt).toString()).toUTCString();

        header.append(author);
        header.append(time);

        // Content
        let content = document.createElement('span');
        content.classList = 'message-content';
        content.append(document.createTextNode(msg.content));


        // Message
        if(last.author.id == msg.author.id){
            document.getElementById('message-' + last.id).append(document.createElement('br'));
            document.getElementById('message-' + last.id).append(content);
        }
        else{
            let message = document.createElement('div');
            message.classList = 'message';
            message.append(header);
            message.append(content);

            message.id = 'message-' + msg.id;
            last.id = msg.id;
            document.getElementById('messages-container').append(message);
        }
        last.author = msg.author;

    };

    let create_banner = al => {
        let sys = document.createElement('div');
        sys.classList = 'message';
        sys.style.textAlign = 'center';
        sys.innerHTML = al;

        document.getElementById('messages-container').append(sys);
        document.getElementById('scroller').scrollTo(0,document.getElementById('scroller').scrollHeight);
    }

    // TODO: Receive the User information and save the token in local storage to re-authenticate the user on connection loss or re-login

    socket.on('message', msg => {
        create_message(msg);

        // Scroll down so the user can see the new message
        document.getElementById('scroller').scrollTo(0,document.getElementById('scroller').scrollHeight);
    });

    socket.on('alert', al => {
        alert(al[0] + '\n\n' + al[1])
    });

    socket.on('system', al => {
        create_banner(al);
    });

    socket.on('disconnect', () => {
        // TODO
        // On socket disconnect try to reconnect with the token as message
        // The server will recognize the token and re-login the user

        $('#disconnection-warning').addClass('unhide');
    })

    socket.on('connect', () => {
        $('#disconnection-warning').removeClass('unhide');
    })


    // TODO
    // Focus input on unfocused typing

    let send_message = () => {
        // Send message to socket
        socket.emit('message', {
            content: $('#message').val(),
            channel: 'implement channel feature later'
        });
        $('#message').val('');
    };

    $('#message').on('keypress', e => {
        if(e.which == 13){
            send_message();
        }
    })

    $('#send').on('click', e => {
            send_message();
    })

    $('.message').on('mousedown', e => {
        if(e.which == 3){
            // TODO: Show context menu
        }
    });

    $('.settings-icon').on('click', e => {
        $('#settings').toggleClass('hidden');
        $('.settings-category').css('border-right', 'none');
        $('.settings-popout').removeClass('unhide');
    });

    function settings(name){
        $('.settings-category').css('border-right', 'none');
        $('#settings-' + name).css('border-right', '1px solid white');

        $('.settings-popout').removeClass('unhide');
        $('#settings-' + name + '-popout').addClass('unhide');
    }

    $(() => {
        $('header-information').append(socket.user.name);
    });



    // LOGIN
    
/*
    socket.emit('login', {
        token: window.localStorage.getItem('token') || 'new'
    });

    socket.on('login', data => {
        window.localStorage.setItem('token', data.token)
    });*/
</script>