<link rel="stylesheet" href="css/main.css" />
<link rel="stylesheet" href="css/chat.css" />
<link rel="stylesheet" href="css/themes/colors.css" />
<link rel="stylesheet" href="https://cdn.materialdesignicons.com/3.5.95/css/materialdesignicons.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="js/REST.js"></script>
<title>Azuma</title>


<div class="header">
    
    <div class="header-information">
        Logged in as<br>
    </div>
    <div class="settings-icon">
        <span class="mdi mdi-settings"></span>
    </div>
</div>

<div class="channellist" id="channels">
    <div class="channel">#general</div>
    <div class="channel">#memes</div>
</div>

<div class="channellist hidden" id="settings">
    <div class="settings-category" onclick="settings('account')" id="settings-account">Account<span class="mdi mdi-chevron-right settings-chevron"></span></div>
    <div class="settings-category" onclick="settings('appearance')" id="settings-appearance">Appearance<span class="mdi mdi-chevron-right settings-chevron"></span></div>
    <div class="settings-category" onclick="settings('sound')" id="settings-sound">Sound<span class="mdi mdi-chevron-right settings-chevron"></span></div>
    <div class="settings-category" onclick="settings('info')" id="settings-info">Info<span class="mdi mdi-chevron-right settings-chevron"></span></div>
    <a href="/logout"><div class="settings-category">Logout<span class="mdi mdi-account-arrow-right-outline settings-chevron"></span></div></a>
</div>

<!--Settings popouts-->

<div class="settings-popout" id="settings-account-popout">
    <div class="form-header big color-title">
        <span class="settings-headline"><span class="mdi mdi-account-outline"> </span>Account</span>
    </div><br><br><br><br>
</div>

<div class="settings-popout" id="settings-appearance-popout">
    <div class="form-header big color-red">
        <span class="settings-headline"><span class="mdi mdi-palette-outline"> </span>Appearance</span>
    </div><br><br><br><br>
    <!--Yeah, it's simple. But works. xd-->
    <button class="button" onclick="$(document.body).toggleClass('invert')">Switch Theme</button>
</div>

<div class="settings-popout" id="settings-sound-popout">
    <div class="form-header big color-blue">
        <span class="settings-headline"><span class="mdi mdi-speaker"> </span>Sound</span>
    </div><br><br><br><br>
    <button class="button" onclick="new Audio('/resources/audio/message.mp3').play();"><span class="mdi mdi-volume-high"></span> Incoming message</button><br>
    <button class="button" onclick="new Audio('/resources/audio/message_short.mp3').play();"><span class="mdi mdi-volume-high"></span> Short incoming message</button><br>
    <button class="button" onclick="new Audio('/resources/audio/friend_request.mp3').play();"><span class="mdi mdi-volume-high"></span> New Friend request</button><br>
</div>

<div class="settings-popout" id="settings-info-popout">
    <div class="form-header big color-blue">
        <span class="settings-headline"><span class="mdi mdi-information-outline"> </span>Info</span>
    </div><br><br><br><br>
    Azuma is being developed by shinixsensei and RMC Productions.<br><br>
    The Notification sounds are licensed under a CC-Attribution License. Find the sounds here:<br>
    <a href="https://notificationsounds.com/notification-sounds/job-done-501">New message sound</a><br>
    <a href="https://notificationsounds.com/notification-sounds/suppressed-437">Short new message sound</a><br>
    <a href="https://notificationsounds.com/message-tones/youve-been-informed-345">New Friend request</a><br>

</div>



<div class="chat-messages">
    <div class="scroll-container" id="scroller">
        <div class="messages-container" id="messages-container">
            <!--Messages are appended here-->
        </div>
    </div>
    <div class="input h">
        <input placeholder="Write a message..." id="message" class="input messagebox">
        <span class="mdi mdi-send send-icon color-blue" id="send"></span>
    </div>
</div>

<div id="disconnection-warning">
    <span class="mdi mdi-close-network-outline"></span>You have been disconnected from the chat. Please be patient.
</div>



<script>
   

    var socket = io();

    let last = {
        author: '',
        id: ''
    }

    socket.emit('login', window.localStorage.getItem('token'));

    let create_alert = (title, description, level) => {

        let colors = {
            alert: 'red',
            info: 'blue',
            success: 'green',
            chat: 'blue'
        }

        if(!level) var level = 'alert';
        let notify = document.createElement('div');
        notify.classList = 'alert';

        let icon = document.createElement('div');
        icon.classList = 'alert-left color-' + colors[level];
        switch(level){
            case 'alert':
                icon.innerHTML='<span class="alert-icon mdi mdi-alert-circle-outline"></span>';
                break;
            case 'info':
                icon.innerHTML='<span class="alert-icon mdi mdi-information-outline"></span>';
                break;
            case 'success':
                icon.innerHTML='<span class="alert-icon mdi mdi-check-circle-outline"></span>';
                break;
            case 'chat':
                icon.innerHTML='<span class="alert-icon mdi mdi-message-outline"></span>';
                break;
        }
        notify.append(icon);

        let headline = document.createElement('div');
        headline.classList = 'alert-title';
        headline.innerHTML = title || 'Untitled';
        notify.append(headline);

        let text = document.createElement('div');
        text.classList = 'alert-text';
        text.innerHTML =  description || 'No description';
        notify.append(text);

        let timer = document.createElement('div');
        timer.classList = 'alert-timer';
        notify.append(timer);

        document.body.append(notify);

        setTimeout(() => {                     
            notify.style.animation = 'plopOut .3s cubic-bezier(0.15, 0, 1, -0.5)';
            setTimeout(() => {                     
                document.body.removeChild(notify)
            }, 290)
        }, 3800)
    };

    let create_message = msg => {
        // Header (Author/Time)
        let header = document.createElement('div');

        let author = document.createElement('span');
        author.classList = 'message-author';
        author.style.color = msg.author.color;
        author.append(document.createTextNode(msg.author.name + ' '));

        let time = document.createElement('span');
        time.classList = 'message-time';
        time.innerHTML = new Date(Date(message.createdAt).toString()).toUTCString();

        header.append(author);
        header.append(time);

        // Content
        let content = document.createElement('span');
        content.classList = 'message-content';
        content.append(document.createTextNode(msg.content));


        // Message
        if(last.author.id == msg.author.id){
            document.getElementById('message-' + last.id).append(document.createElement('br'));
            document.getElementById('message-' + last.id).append(content);
        }
        else{
            let message = document.createElement('div');
            message.classList = 'message';
            message.append(header);
            message.append(content);

            message.id = 'message-' + msg.id;
            last.id = msg.id;
            document.getElementById('messages-container').append(message);
        }
        last.author = msg.author;

    };

    let create_banner = al => {
        let sys = document.createElement('div');
        sys.classList = 'message';
        sys.style.borderLeft = '4px solid #ccc';
        sys.style.borderRadius = '0 10px 10px 0';
        sys.innerHTML = al;

        last.author = '';
        last.id = '';

        document.getElementById('messages-container').append(sys);
        document.getElementById('scroller').scrollTo(0,document.getElementById('scroller').scrollHeight);
    }

    let channel_list = channels => {
        channels.forEach(c => {
            let channel = document.createElement('div');
            channel.classList = 'channel';
            channel.innerHTML = '#' + c.name;
            channel.id = 'channel-' + c.id;

            $('#channels').append(channel);
        })
    };

     if(!window.localStorage.getItem('token')){
        create_alert('You need to sign in with an account.', 'You will now be redirected to the login page.', 'alert')
        setTimeout(() => window.location.replace("/login"), 4000);
    }

    let who_am_i = 'nobody';
    api.request('user/token/' + window.localStorage.getItem('token'), d => {
        let data = JSON.parse(d);
        if(!data.success){
            create_alert('You provided an invalid token.', 'You will now be redirected to the login page.', 'alert')
            setTimeout(() => window.location.replace("/login"), 4000);
        }
        else{
            $('.header-information').append(document.createTextNode(data.data.name));
            who_am_i = data.data;
        }
    });

    let channel_dir = new Map();
    api.request('room/channels', c => {
        let data = JSON.parse(c);
        if(!data.success){
            create_alert('Channel list couldn\'t be fetched.', 'Please try reloading the page. ' + data.message, 'alert')
        }
        else{
            
        }
    });


    let missed = 0;
    $(window).on('focus', () => {
        missed = 0;
        document.title = `Azuma`;
        $('#message').focus();
    });
    socket.on('message', msg => {
        if(!document.hasFocus()){
            new Audio('/resources/audio/message.mp3').play();
            missed += 1;
            document.title = `(${missed}) Azuma`;
            create_alert(msg.author.name, msg.content, 'chat');
        }
        create_message(msg);

        // Scroll down so the user can see the new message
        document.getElementById('scroller').scrollTo(0,document.getElementById('scroller').scrollHeight);
    });

    socket.on('alert', al => {
        create_alert(al[0], al[1]);
    });

    socket.on('system', al => {
        create_banner(al);
        //create_alert('System', al, 'info');
    });

    socket.on('disconnect', () => {
        // TODO
        // On socket disconnect try to reconnect with the token as message
        // The server will recognize the token and re-login the user

        $('#disconnection-warning').addClass('unhide');
    })

    socket.on('connect', () => {
        $('#disconnection-warning').removeClass('unhide');
    })


    // TODO
    // Focus input on unfocused typing

    let send_message = () => {
        // Send message to socket
        socket.emit('message', {
            content: $('#message').val(),
            channel: 'implement channel feature later'
        });
        $('#message').val('');
    };

    $('#message').on('keypress', e => {
        if(e.which == 13){
            send_message();
        }
    })

    $('#send').on('click', e => {
            send_message();
    })

    $('.message').on('mousedown', e => {
        if(e.which == 3){
            // TODO: Show context menu
        }
    });

    $('.settings-icon').on('click', e => {
        $('#settings').toggleClass('hidden');
        $('.settings-category').css('border-right', 'none');
        $('.settings-popout').removeClass('unhide');
    });

    function settings(name){
        $('.settings-category').css('border-right', 'none');
        $('#settings-' + name).css('border-right', '1px solid white');

        $('.settings-popout').removeClass('unhide');
        $('#settings-' + name + '-popout').addClass('unhide');
    }
</script>